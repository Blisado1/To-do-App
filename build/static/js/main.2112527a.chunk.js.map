{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","onChange","placeholder","onClick","React","Component","style","display","justifyContent","textDecoration","todo","toggleComplete","onDelete","TodoList","todos","todoToShow","toggleAllComplete","addTodo","map","updateTodoToShow","s","handleDelete","filter","removeAllTodoThatAreComplete","Todo","length","some","App","count","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2112527a.chunk.js","sourcesContent":["import React from \"react\";\nimport shortid from \"shortid\";\n\nexport default class TodoForm extends React.Component {\n\n    state = {\n        text: \" \"\n    };\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault(); \n        // submit\n        this.props.onSubmit({\n            id: shortid.generate(),\n            text: this.state.text,\n            complete: false,\n        });\n        this.setState({\n            text: \" \"\n        });\n    };\n\n    render() {\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <input\n                    name=\"text\" \n                    value={this.state.text} \n                    onChange={this.handleChange} \n                    placeholder=\"todo...\"\n                />\n                <button onClick={this.handleSubmit}> add todo </button>\n            </form>\n            \n        ); \n    }\n}","import React from \"react\";\n\nexport default (props) => (\n    <div style={{ display: \"flex\", justifyContent: \"center\"}}>\n        <div\n        style={{ \n            textDecoration: props.todo.complete ? \"line-through\" : \" \"\n        }}\n        onClick={props.toggleComplete}\n        >\n            {props.todo.text}\n        </div>\n        <button onClick={props.onDelete}>x</button>\n    </div>\n);\n","import React from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Todo from \"./Todo\";\n\n/*\n    TodoMVC\n    1. add todo\n    2. display todo\n    3. cross of todo\n    4. show number of active todos\n    5. filter all/active/complete\n    6. delete todo\n    7. delete all complete\n        7.1. Only show if at least one is complete\n    8. button to toggle all on/off.\n*/\n\nexport default class TodoList extends React.Component {\n    state = {\n        todos: [],\n        todoToShow: \"all\",\n        toggleAllComplete: true\n    };\n\n    addTodo = (todo) => {\n        this.setState(state => ({\n            todos: [todo, ...state.todos]\n        }));\n    }\n\n    toggleComplete = (id) => {\n        this.setState(state =>({\n            todos: state.todos.map(todo => {\n                if(todo.id === id){\n                    //Update\n                    return {\n                        ...todo,\n                        complete: !todo.complete\n                    }                    \n                } else {\n                    return todo;\n                }\n            })\n        }))\n    }\n    updateTodoToShow = (s) => {\n        this.setState({\n            todoToShow: s\n        });\n    }\n\n    handleDelete = (id) => {\n        this.setState(state => ({\n            todos: this.state.todos.filter(todo => todo.id !== id)\n        }))\n    }\n\n    removeAllTodoThatAreComplete = (id) => {\n        this.setState(state => ({\n            todos: state.todos.filter(todo => !todo.complete)\n        }))\n    }\n\n    render() {\n        let todos = [];\n\n        if (this.state.todoToShow === 'all'){\n            todos = this.state.todos;\n        }else if (this.state.todoToShow === 'active'){\n            todos = this.state.todos.filter(todo => !todo.complete)\n        }else if (this.state.todoToShow === 'complete'){\n            todos = this.state.todos.filter(todo => todo.complete)\n        }\n\n        return (\n            <div> \n            <TodoForm onSubmit={this.addTodo} />\n            {todos.map(todo => (\n                <Todo \n                    key={todo.id} \n                    toggleComplete={() => this.toggleComplete(todo.id)} \n                    onDelete={() => this.handleDelete(todo.id)}\n                    todo={todo} \n                />\n            ))}\n            <div>\n                Todos left: {this.state.todos.filter(todo => !todo.complete).length}\n            </div>\n            <div>\n                <button onClick={() => this.updateTodoToShow('all')}>all</button>\n                <button onClick={() => this.updateTodoToShow('active')}>active</button>\n                <button onClick={() => this.updateTodoToShow('complete')}>complete</button>\n            </div>\n            \n            {this.state.todos.some(todo => todo.complete) ? (\n                <div>\n                    <button onClick={this.removeAllTodoThatAreComplete}> remove all complete todos</button>\n                </div>\n            ) : null}\n\n            <div>\n                <button onClick={() =>\n                    this.setState(state => ({\n                        todos: state.todos.map(todo => ({\n                            ...todo,\n                            complete: state.toggleAllComplete\n                        })),\n                        toggleAllComplete: !state.toggleAllComplete\n                    }))\n                }>\n                    toggle all complete {`${this.state.toggleAllComplete}`}\n                </button>\n            </div>\n        </div>\n        );\n    }\n}","//import logo from './logo.svg';\nimport { Component } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nclass App extends Component{\n  state = {\n    count: 0\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}